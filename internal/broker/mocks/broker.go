// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_broker is a generated GoMock package.
package mock_broker

import (
	dto "github.com/b00lduck/rest-websocket-tester/internal/dto"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMarshaller is a mock of Marshaller interface
type MockMarshaller struct {
	ctrl     *gomock.Controller
	recorder *MockMarshallerMockRecorder
}

// MockMarshallerMockRecorder is the mock recorder for MockMarshaller
type MockMarshallerMockRecorder struct {
	mock *MockMarshaller
}

// NewMockMarshaller creates a new mock instance
func NewMockMarshaller(ctrl *gomock.Controller) *MockMarshaller {
	mock := &MockMarshaller{ctrl: ctrl}
	mock.recorder = &MockMarshallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMarshaller) EXPECT() *MockMarshallerMockRecorder {
	return m.recorder
}

// Marshal mocks base method
func (m *MockMarshaller) Marshal(message []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal", message)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Marshal indicates an expected call of Marshal
func (mr *MockMarshallerMockRecorder) Marshal(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*MockMarshaller)(nil).Marshal), message)
}

// MockBroadcaster is a mock of Broadcaster interface
type MockBroadcaster struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcasterMockRecorder
}

// MockBroadcasterMockRecorder is the mock recorder for MockBroadcaster
type MockBroadcasterMockRecorder struct {
	mock *MockBroadcaster
}

// NewMockBroadcaster creates a new mock instance
func NewMockBroadcaster(ctrl *gomock.Controller) *MockBroadcaster {
	mock := &MockBroadcaster{ctrl: ctrl}
	mock.recorder = &MockBroadcasterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBroadcaster) EXPECT() *MockBroadcasterMockRecorder {
	return m.recorder
}

// Broadcast mocks base method
func (m *MockBroadcaster) Broadcast(message dto.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", message)
}

// Broadcast indicates an expected call of Broadcast
func (mr *MockBroadcasterMockRecorder) Broadcast(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockBroadcaster)(nil).Broadcast), message)
}

// MockBroker is a mock of Broker interface
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockBroker) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run
func (mr *MockBrokerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockBroker)(nil).Run))
}

// Message mocks base method
func (m *MockBroker) Message(message []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Message", message)
}

// Message indicates an expected call of Message
func (mr *MockBrokerMockRecorder) Message(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockBroker)(nil).Message), message)
}
