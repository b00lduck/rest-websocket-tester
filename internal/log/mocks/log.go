// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_log is a generated GoMock package.
package mock_log

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSugaredLogger is a mock of SugaredLogger interface
type MockSugaredLogger struct {
	ctrl     *gomock.Controller
	recorder *MockSugaredLoggerMockRecorder
}

// MockSugaredLoggerMockRecorder is the mock recorder for MockSugaredLogger
type MockSugaredLoggerMockRecorder struct {
	mock *MockSugaredLogger
}

// NewMockSugaredLogger creates a new mock instance
func NewMockSugaredLogger(ctrl *gomock.Controller) *MockSugaredLogger {
	mock := &MockSugaredLogger{ctrl: ctrl}
	mock.recorder = &MockSugaredLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSugaredLogger) EXPECT() *MockSugaredLoggerMockRecorder {
	return m.recorder
}

// Debugw mocks base method
func (m *MockSugaredLogger) Debugw(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugw", varargs...)
}

// Debugw indicates an expected call of Debugw
func (mr *MockSugaredLoggerMockRecorder) Debugw(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugw", reflect.TypeOf((*MockSugaredLogger)(nil).Debugw), varargs...)
}

// Infow mocks base method
func (m *MockSugaredLogger) Infow(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infow", varargs...)
}

// Infow indicates an expected call of Infow
func (mr *MockSugaredLoggerMockRecorder) Infow(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infow", reflect.TypeOf((*MockSugaredLogger)(nil).Infow), varargs...)
}

// Warnw mocks base method
func (m *MockSugaredLogger) Warnw(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnw", varargs...)
}

// Warnw indicates an expected call of Warnw
func (mr *MockSugaredLoggerMockRecorder) Warnw(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnw", reflect.TypeOf((*MockSugaredLogger)(nil).Warnw), varargs...)
}

// Errorw mocks base method
func (m *MockSugaredLogger) Errorw(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorw", varargs...)
}

// Errorw indicates an expected call of Errorw
func (mr *MockSugaredLoggerMockRecorder) Errorw(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorw", reflect.TypeOf((*MockSugaredLogger)(nil).Errorw), varargs...)
}

// Fatalw mocks base method
func (m *MockSugaredLogger) Fatalw(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalw", varargs...)
}

// Fatalw indicates an expected call of Fatalw
func (mr *MockSugaredLoggerMockRecorder) Fatalw(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalw", reflect.TypeOf((*MockSugaredLogger)(nil).Fatalw), varargs...)
}
