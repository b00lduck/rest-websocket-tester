// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_log is a generated GoMock package.
package mock_log

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSugaredLogger is a mock of SugaredLogger interface
type MockSugaredLogger struct {
	ctrl     *gomock.Controller
	recorder *MockSugaredLoggerMockRecorder
}

// MockSugaredLoggerMockRecorder is the mock recorder for MockSugaredLogger
type MockSugaredLoggerMockRecorder struct {
	mock *MockSugaredLogger
}

// NewMockSugaredLogger creates a new mock instance
func NewMockSugaredLogger(ctrl *gomock.Controller) *MockSugaredLogger {
	mock := &MockSugaredLogger{ctrl: ctrl}
	mock.recorder = &MockSugaredLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSugaredLogger) EXPECT() *MockSugaredLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method
func (m *MockSugaredLogger) Debug(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug
func (mr *MockSugaredLoggerMockRecorder) Debug(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockSugaredLogger)(nil).Debug), args...)
}

// Info mocks base method
func (m *MockSugaredLogger) Info(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info
func (mr *MockSugaredLoggerMockRecorder) Info(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockSugaredLogger)(nil).Info), args...)
}

// Warn mocks base method
func (m *MockSugaredLogger) Warn(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn
func (mr *MockSugaredLoggerMockRecorder) Warn(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockSugaredLogger)(nil).Warn), args...)
}

// Error mocks base method
func (m *MockSugaredLogger) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error
func (mr *MockSugaredLoggerMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockSugaredLogger)(nil).Error), args...)
}

// Fatal mocks base method
func (m *MockSugaredLogger) Fatal(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal
func (mr *MockSugaredLoggerMockRecorder) Fatal(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockSugaredLogger)(nil).Fatal), args...)
}
